{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/details.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,mB;;;;;;;;;;;ACAA,0vDAA0vD,+LAA+L,SAAS,+mBAA+mB,6CAA6C,UAAU,4FAA4F,UAAU,yUAAyU,YAAY,+8D;;;;;;;;;;;;;;;;;;;;;;;;;ACAj/F;AACC;AAMnD;IAEE,sBAAoB,cAA6B;QAA7B,mBAAc,GAAd,cAAc,CAAe;QAIjD,aAAQ,GAAG,IAAI,CAAC;QAChB,mBAAc,GAAQ,KAAK,CAAC;QAC5B,WAAM,GAAG,EAAE,CAAC;QACZ,YAAO,GAAO,KAAK,CAAC;IALpB,CAAC;IAMD,+BAAQ,GAAR;QACE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAED,iCAAU,GAAV,UAAW,MAAM;QAAjB,iBAIC;QAHC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,cAAI;YACnD,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC1C,CAAC,CAAC;IACJ,CAAC;IAGD,qCAAc,GAAd,UAAe,CAAC,EAAE,IAAI;QACpB,IAAI,CAAC,YAAY,GAAC,CAAC;IACrB,CAAC;IAED,2BAAI,GAAJ,UAAK,IAAI;QAAT,iBASC;QARA,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,cAAI;YACpF,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACxC,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAG,KAAI,CAAC,cAAc;gBAAE,KAAI,CAAC,OAAO,GAAG,0CAA0C;;gBAC5E,KAAI,CAAC,OAAO,GAAG,2CAA2C;YAC/D,UAAU,CAAC,cAAQ,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC,CAAE,CAAC,EAAE,IAAI,CAAC;YAClD,KAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC7B,CAAC,CAAC,CAAC;IACJ,CAAC;IACD,iCAAU,GAAV,UAAW,IAAI;QACb,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;IAC3B,CAAC;IAED,oCAAa,GAAb,UAAc,GAAG;QACf,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAS,CAAC;YACjC,IAAI,IAAI,GAAO,EAAE,CAAC;YAClB,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;YACb,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAE;YACrB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAChB,CAAC;IAGD,kCAAW,GAAX;QAAA,iBAGC;QAFA,IAAG,IAAI,CAAC,MAAM,IAAI,EAAE;YAAE,OAAQ,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,cAAI,IAAI,QAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAA9E,CAA8E,CAAC,CAAC;;YACrI,OAAQ,IAAI,CAAC,OAAO,CAAC;IAC3B,CAAC;IAvDU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAGmC,+DAAc;OAFtC,YAAY,CAwDxB;IAAD,mBAAC;CAAA;AAxDwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPiC;AACjB;AACI;AACiC;AAC/B;AACG;AACgC;AAgBlF;IAAA;IAAyB,CAAC;IAAb,SAAS;QAdrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,0DAAW;gBACX,4FAAuB;gBACvB,qEAAgB;aAEjB;YACD,SAAS,EAAE,CAAC,+DAAc,CAAC;YAC3B,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBqB;AACM;AAIjD;IAGE,wBAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAFnC,QAAG,GAAC,4BAA4B;IAEO,CAAC;IACxC,mCAAU,GAAV,UAAW,EAAE;QACX,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAC,EAAE,EAAC,EAAE,CAAC;IACtC,CAAC;IACD,sCAAa,GAAb,UAAc,EAAE,EAAE,GAAG,EAAE,KAAK;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAC,EAAE,GAAC,GAAG,GAAC,GAAG,GAAC,GAAG,GAAC,KAAK,EAAC,EAAE,CAAC;IACxD,CAAC;IAVU,cAAc;QAH1B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAIyB,+DAAU;OAHxB,cAAc,CAW1B;IAAD,qBAAC;CAAA;AAX0B;;;;;;;;;;;;;ACL3B;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<header id=\\\"header\\\">\\n  <div class=\\\"container\\\">\\n\\n    <div id=\\\"logo\\\" class=\\\"pull-left\\\">\\n      <h1>\\n        <a href=\\\"javascript:void(0)\\\" class=\\\"scrollto\\\">HEADER</a>\\n      </h1>\\n      <!-- Uncomment below if you prefer to use an image logo -->\\n      <!-- <a href=\\\"#intro\\\"><img src=\\\"img/logo.png\\\" alt=\\\"\\\" title=\\\"\\\" /></a>-->\\n    </div>\\n\\n   \\n    <!-- #nav-menu-container -->\\n\\n  </div>\\n</header>\\n<!-- #header -->\\n\\n<div class=\\\"container\\\">\\n\\n\\n  \\n  <div class=\\\"container bootstrap snippet\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-lg-12\\\">\\n        <div class=\\\"main-box no-header clearfix\\\">\\n          <div class=\\\"row search-container\\\">\\n              <div class=\\\"col-md-2\\\">\\n                  <div class=\\\"input-group input-group-unstyled\\\">\\n                          <select [(ngModel)]=folderID name=\\\"folderID\\\" (change)=getRecords(folderID) class=\\\"form-control\\\">\\n                            <option value=\\\"p1\\\">P1</option>\\n                            <option value=\\\"p2\\\">P2</option>\\n                          </select>\\n                        \\n                  </div>\\n              </div>\\n            <div class=\\\"col-md-4\\\">\\n              <div class=\\\"input-group input-group-unstyled\\\">\\n                  <input type=\\\"text\\\" placeholder=\\\"Search Env variabels\\\" class=\\\"form-control\\\" name=\\\"search\\\" [(ngModel)]=\\\"search\\\" />\\n                  <span class=\\\"input-group-addon\\\">\\n                      <i class=\\\"fa fa-search\\\"></i>\\n                  </span>\\n              </div>\\n          </div>\\n          \\n          <div class=\\\"col-md-6 text-right\\\">\\n            \\n            \\n            <button (click)=\\\"createItem()\\\" class=\\\"btn btn-success\\\"> <i class=\\\"fa fa-plus\\\"></i> &nbsp; Create </button>\\n          </div>\\n          </div>\\n          <div class=\\\"main-box-body clearfix\\\">\\n              <div class=\\\"alert alert-info\\\" *ngIf=\\\"message\\\">\\n                  {{message}}\\n                </div>\\n            <div class=\\\"table-responsive\\\">\\n              <table class=\\\"table user-list\\\">\\n                <thead>\\n                  <tr>\\n                    <th>Folder</th>\\n                    <th>Key</th>\\n                    <th>Value</th>\\n                    <th>Edit</th>\\n                  </tr>\\n                </thead>\\n                <tbody>\\n                  <tr *ngIf=\\\"(!details || details.length == 0)  && !createItemData\\\">\\n                    <td colspan=\\\"5\\\">No Data Found</td>\\n                  </tr>\\n                  <tr *ngFor=\\\"let item of searchValue(details); let i = index\\\">\\n                    <td>{{folderID}}</td>\\n                    <td>\\n                      <span *ngIf=\\\"i != selectedItem\\\" >{{item.key}}</span>\\n                      <span *ngIf=\\\"i == selectedItem\\\"><input [(ngModel)]=item.key name=\\\"key\\\" placeholder='Enter Key' type=\\\"text\\\" pattern=\\\"^\\\\S*$\\\" class=\\\"form-control\\\" id=\\\"key\\\" required></span>\\n                    </td>\\n                    <td>\\n                        <span *ngIf=\\\"i != selectedItem\\\" >{{item.value}}</span>\\n                          <span *ngIf=\\\"i == selectedItem\\\"><input [(ngModel)]=item.value name=\\\"value\\\" placeholder='Enter value' type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"key\\\" required></span>\\n                    </td>\\n                    <td>\\n                      <button *ngIf=\\\"i != selectedItem\\\" (click)=\\\"selectEditItem(i)\\\">Edit</button>\\n                      <button *ngIf=\\\"i == selectedItem\\\" class=\\\"btn-success\\\" (click)=\\\"edit(item)\\\">Save</button>\\n                      <button *ngIf=\\\"i == selectedItem\\\" class=\\\"btn-danger\\\" (click)=\\\"selectedItem = null\\\">Cancel</button>\\n                    </td>\\n                  </tr>\\n                  <tr *ngIf=\\\"createItemData\\\">\\n                    <td>\\n                      <select [(ngModel)]=folderID readonly name=\\\"folder\\\" placeholder='Select Folder' class=\\\"form-control\\\" id=\\\"folder\\\" required>\\n                          <option value=\\\"p1\\\">P1</option>\\n                          <option value=\\\"p2\\\">P2</option>\\n                      </select>\\n                    </td>\\n                    <td>\\n                      <input [(ngModel)]=createItemData.key name=\\\"key\\\" placeholder='Enter Key' type=\\\"text\\\" pattern=\\\"^\\\\S*$\\\" class=\\\"form-control\\\" id=\\\"key\\\" required>\\n                    </td>\\n                    <td>\\n                      <input [(ngModel)]=createItemData.value name=\\\"value\\\" placeholder='Enter Value' type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"value\\\" required>\\n                    </td>\\n                    <td>\\n                        <button *ngIf=\\\"i == selectedItem\\\" class=\\\"btn-success\\\" (click)=\\\"edit(createItemData)\\\">Save</button>\\n                        <button *ngIf=\\\"i == selectedItem\\\" class=\\\"btn-danger\\\" (click)=\\\"createItemData = null\\\">Cancel</button>\\n                    </td>\\n                  </tr>\\n                </tbody>\\n              </table>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { DetailsService } from './details.service';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n\n  constructor(private detailsService:DetailsService){\n    \n  }\n  details:any\n  folderID = 'p1';\n  createItemData: any = false;\n  search = '';\n  message:any = false;\n  ngOnInit(){\n    this.getRecords(this.folderID);  \n  }\n\n  getRecords(folder){\n    this.detailsService.getdetails(folder).subscribe(data =>{\n      this.details = this.objectToArray(data);\n    })\n  }\n  \n  selectedItem:any\n  selectEditItem(i, item){\n    this.selectedItem=i\n  }\n\n  edit(item){\n   this.detailsService.updateDetails(this.folderID, item.key, item.value).subscribe(data =>{\n    this.details = this.objectToArray(data);\n    this.selectedItem = null;\n    if(this.createItemData) this.message = \"New Enveronment was created successfully\"\n    else this.message = \"Enveronment veraible updated successfully\"\n    setTimeout(() => { this.message = false;  }, 5000)\n    this.createItemData = false;\n   });\n  }\n  createItem(item){\n    this.selectedItem = null;\n    this.createItemData = {};\n  }\n\n  objectToArray(obj){\n    var result = [];\n    Object.keys(obj).forEach(function(i) {\n      var temp:any = {};\n      temp.key = i;\n      temp.value = obj[i] ;\n      result.push(temp)\n    });\n    return result;\n  }\n\n\n  searchValue(){\n   if(this.search != '') return  this.details.filter(item => (item.key.indexOf(this.search) != -1 || item.value.indexOf(this.search) != -1));\n   else return  this.details;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { AppComponent } from './app.component';\nimport { DetailsService } from './details.service'\nimport { HttpClientModule, /* other http imports */ } from \"@angular/common/http\";\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    HttpClientModule\n    \n  ],\n  providers: [DetailsService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'\n@Injectable({\n  providedIn: 'root'\n})\nexport class DetailsService {\n  url='http://localhost:8002/api/'\n\n  constructor(private http:HttpClient) { }\n  getdetails(id){\n    console.log(id)\n    return this.http.get(this.url+id,{})\n  }\n  updateDetails(id, key, value){\n    return this.http.get(this.url+id+'/'+key+'/'+value,{})\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}